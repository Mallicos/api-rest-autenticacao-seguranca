1 - BOAS PRÁTICAS NA API
 * Cada método possui um tipo de código de retorno de acordo com o seu método http
 * Fazer com que cada método retorne o código certo usando a classe ResponseEntity

    - delete: retorna código 204
    - listar: retorna código 200
    - atualizar: retorna código 200, porém retorna o objeto atualizado no corpo da requisição
    - cadastrar: retorna código 201, porém retorna o objeto cadastrado no corpo da requisição, e um header com o endereço
        para o objeto criado

 * códigos http: https://http.dog/
 * Criar um novo método que retorna um objeto específico de acordo com o id informado,
    essa é uma requisição do tipo get, semelhante a requisição delete, porém com o verbo GET.

2 - LIDANDO COM ERROS

    * Quando ocorre algum erro na aplicação, por exemplo busca um registro que não existe na base de dados, o spring
        retorna erro 500, porém algumas informações retornadas pelo spring são desnecessárias, para configurar o que o
        spring deve retornar quando ocorrer um erro, devemos mecher no arquivo aplication.properties
        adicionando a configuração:
        server.error.include-stacktrace=never
        essa configuração esconde a propriedade "trace", que acaba espondo classes e classes do sistema
        mais dessas configurações podem ser envontradas em:
        https://docs.spring.io/spring-boot/appendix/application-properties/index.html

    * Para realizarmos o tratamento de erros precisamos colocar nosso código dentro de um try catch, porém essa abordagem,
        pode levar a repetição de código, logo para resolvermos o tratamento de erro de forma mais eficiente,
        criaremos uma classe que será responsável por tratar os diversos tipos de exceptions.
        Mas antes devemos organizar a estrutura de pastas da api, colocando os diretórios de dominio no diretório domain,
        e a classe responsável por tratar os erros no diretório infra.

    * Para tratar o erro 400, é preciso criar mais um método na classe de tratamento de erro, essa classe,
        precisará de outra anotação no cabeçalho do método, e o ResponseEntity, usará outros métodos,
        também é necessário criar um record, com os campos de campo e mensagem, para exibir apenas o campo que não
        foi preenchido, e o campo de mensagem.

    * É possível personalizar as mensagens de erro basta adicionar o atributo message como parâmetro nos DTO's, ex:
        @NotBlank(message = "Email é obrigatório")
        @Email(message = "Formato do email é inválido")
        private String email;

3 - SPRING SECURITY

    * O processo de autenticação de uma API Rest é diferente de um sistema tradicional que utiliza statefull, que nada
        mais é do que, toda vez que o usuário for acessar o sistema, o mesmo cria uma sessão para guardar os dados
        do usuário na memória do servidor.
        As API's Rest, utilizan statelles, ou seja não criam uma sessão, no curso foi utilizado o tipo de autenticação
        via token JWT (Jason Web Token), que ao logar no sistema pela primeira vez, o sistema faz a chamada para a API,
        que consulta na base de dados se existe um usuário com o login e senha informados, se tiver, gera um token que
        é devolvido para o front ou app mobile, agora, toda vez que o cliente for acessar uma url, a API verifica,
        se tem o token no header da requisição, no campo chamado autorization, e se esse token, foi gerado pela API,
        se foi libera a url para o cliente, caso contrário retorna um erro.

    * Adicionar o Spring Security no pom.xml, deve ser adicionada a dependência do spring security e spring security teste,
        ao fazer isso, o spring security  blqueia todas as requisião do nosso sistema, e gera uma senha aleatória no console,
        se abrirmos a url no navegador, vamor ser redirecionados para uma tela de login gerada pelo próprio spring security,
        para acessar basta usar a senha gerada pelo spring no console, e o usuário é user.

    * Criar a entidade Usuário na API que representará o usuário que acessará a API e criar a migration com os dados
        que devem ser salvos no banco de dados, no caso são: id, login (que deve ser o email do cliente pois é um dado único),
        e a senha, todos do tipo String menos o id que deve ser Long.

    * Criar o repositório do usuário (UsuarioRepository) onde vai ser possível acessar a base de dados para buscar pelo
        usuário logado. Também deve ser criada uma classe de serviço (AutenticacaoService), que serve para autenticar o usuário toda vez que
        o mesmo logar no sistema, essa classe tem por objetivo, evitar de fazer a autenticação no controller.

    * A próxima alteração é configurar o Spring Security para ele não usar o processo de segurança tradicional, o stateful.
        Como estamos trabalhando com uma API Rest, o processo de autenticação precisa ser stateless.
        No IntelliJ, vamos em "src > main > java > med.voll.api > infra". Dentro do pacote infra, já que é uma configuração
        de infraestrutura de segurança, vamos criar uma classe.
        Clicaremos com o botão direito do mouse em TratadorDeErros e, na aba exibida vamos escolher as opções
        "Refactor > Move Class...". Será mostrado um pop-up, em que no campo "To package" vamos criar um sub-pacote.
        Em "To package" estamos com med.voll.api.infra, no final incluiremos .exception. Isso porque a classe TratadorDeErros
        tem haver com exceções que podem acontecer no projeto. Assim, ficamos com: med.voll.api.infra.exception.
        Logo após, vamos clicar no botão "Refactor", no canto inferior direito. Será exibida uma aba "Move", em que selecionaremos
        o botão "Yes". Com isso, a classe TratadorDeErros foi movida para o pacote infra.exception.
        Com o pacote infra.exception selecionado, usaremos o atalho "Alt + Insert" e escolheremos a opção "Package".
        Na aba seguinte, temos med.voll.api.infra.exception. Removeremos o 'exception' e adicionaremos security, e depois apertamos "Enter".
        Agora, vamos criar a classe de configurações de segurança. Selecionando o pacote security, usamos o atalho
        "Alt + Insert" e escolheremos a opção "Java Class".
        Na aba seguinte, intitulado "New Java Class", digitaremos "SecurityConfigurations".
        Anotaremos essa classe com duas anotações:
            @Configuration: diz para o spring que essa é uma classe de configuração.
            @EnableWebSecurity: serve para dizer para o spring que nós é que vamos personalizar o processo de segurança.

    * Temos o cliente da nossa API, no caso um aplicativo mobile, e neste aplicativo consta o formulário de login.
      Ao efetuar o login clicando no botão "Entrar" do aplicativo, uma requisição é enviada para a nossa API,
      levando no corpo da requisição um JSON com o usuário e senha digitado na tela de login.
      Com isso, a nossa API recebe essa requisição e a valida no banco de dados. Caso o usuário esteja cadastrado,
      é gerado o token como resposta. Esse é o fluxo de autenticação que precisamos implementar no projeto.
      Portanto, a próxima alteração que faremos no projeto é implementar o tratamento dessa requisição.
      Precisamos ter um controller para receber essas requisições, responsável por autenticar o usuário no sistema.
      Ainda não construímos esse controller para receber o JSON e disparar o processo de autenticação. Esse será o nosso próximo passo!
      Criar o controller AutenticacaoController.

      Dentro da classe precisamos construir um método chamado efetuarLogin para receber essa requisição.
      Os métodos são geralmente públicos, e o retorno padronizamos para receber um objeto do tipo ResponseEntity:
      public ResponseEntity efetuarLogin.

      No parênteses do método efetuarLogin(), vamos receber um DTO com os dados que serão enviados pelo aplicativo front-end:
      DadosAutenticacao dados.
      Lembrando que esse parâmetro precisa ser anotado com @RequestBody, já que virá no corpo da requisição.
      E, também, o @Valid para validarmos os campos com o bean validation.
      No parêntese do record, incluiremos dois campos: login e senha. Ambos sendo strings.

      O processo de autenticação está na classe AutenticacaoService. Precisamos chamar o método loadUserByUsername,
      já que é ele que usa o repository para efetuar o select no banco de dados.
      Porém, não chamamos a classe service de forma direta no Spring Security. Temos outra classe do Spring que
      chamaremos e é ela que vai chamar a AutenticacaoService.
      No arquivo do controller, precisamos usar a classe Authentication Manager do Spring, responsável por disparar o
      processo de autenticação.
      Vamos declarar o atributo na classe AutenticacaoController. Será privado, e chamaremos de manager.
      Acima, incluiremos a anotação @Autowired, para solicitar ao Spring a injeção desse parâmetro. Não somos nós que
      vamos instanciar esse objeto, e sim o Spring.

      @Autowired
      private AuthenticationManager manager;

      Para usarmos o objeto, utilizamos o método .authenticate() chamando o objeto manager, isso dentro de efetuarLogin().
      No método authenticate(), precisamos passar um objeto do tipo username authentication token.

      Logo após, vamos guardar o retorno do objeto token em uma variável.
      Este método devolve o objeto que representa o usuário autenticado no sistema.
      Perceba que está dando erro de compilação no parâmetro token, isso acontece porque não existe a variável token. Precisamos criá-la na linha de cima.
      Portanto, na variável token criaremos a classe que representa o usuário e a senha. Após o new,
      vamos instanciar um objeto do tipo UsernamePasswordAuthenticationToken() passando como parâmetro o DTO, sendo dados.login(), e dados.senha().
      Temos o nosso DTO e o Spring contém um próprio, também. O método authenticate(token) recebe o DTO do Spring.
      Por isso, precisamos converter para UsernamePasswordAuthenticationToken - como se fosse um DTO do próprio Spring.
      No fim, precisamos retornar um .ok().build(). Isso para recebermos um código 200 OK quando a requisição for efetuada com sucesso.

      Com isso, temos o nosso controller responsável pelo processo de autenticação. Podemos salvar o arquivo e abrir a aba "Run".
      Perceba que ele deu erro ao tentar iniciar o projeto.

      Em seguida, nos informa o motivo da falha:
      Description: Field manager in med.voll.api.controller.AutenticacaoController required a bean of type
      'org.springframework.security.authentication.AuthenticationManager' that could not be found.*

      Isso significa que o campo manager na classe Autenticacao Controller requer um bean do tipo Authentication Manager, que não pôde ser encontrado.
      Isto é, no momento de carregar o AutenticacaoController, ele não encontrou o Authentication Manager. Não conseguiu injetar o atributo manager na classe controller.
      A classe AuthenticationManager é do Spring. Porém, ele não injeta de forma automática o objeto AuthenticationManager,
      precisamos configurar isso no Spring Security. Como não configuramos, ele não cria o objeto AuthenticationManager e lança uma exceção.
      Faremos essa configuração.
      Por ser uma configuração de segurança, faremos essa alteração na classe SecurityConfigurations.

      Vamos criar mais um método após o fecha chaves do SecurityFilterChain. Será um método público, cujo retorno é o objeto
      AuthenticationManager e o nome será authenticationManager.
      No parêntese deste método, receberemos um objeto do tipo AuthenticationConfiguration chamado configuration.
      No retorno, teremos configuration.getAuthenticationManager().
      A classe AuthenticationConfiguration, possui o método getAuthenticationManager() que cria o objeto AuthenticationManager.
      Portanto, usaremos essa classe.
      Note que está gerando um erro de compilação em getAuthenticationManager(), isso acontece porque esse método precisa lançar uma exception.
      Portanto, na assinatura do método AuthenticationManager incluiremos o throws Exception, antes de abrir as chaves.
      Esse é o método que estamos informando ao Spring como injetar objetos. Portanto, acima dele incluiremos a anotação @Bean.
      A anotação @Bean serve para exportar uma classe para o Spring, fazendo com que ele consiga carregá-la e realizar a sua injeção de dependência em outras classes.
      Desse modo, informamos ao Spring como criar um objeto AuthenticationManager. Podemos salvar o arquivo e abrir a aba "Run",
      do lado inferior esquerdo. Agora, sim, foi inicializado corretamente.
      Com isso, criamos o nosso controller de autenticação, e já conseguimos disparar uma requisição para efetuar o login no sistema.
      Vamos testar no Insomnia.
      No painel central, vamos configurar a requisição. No verbo, ao invés de get será post e a URL vai ser
      http://localhost:8080/login, sendo a URL que configuramos na classe AutenticacaoController.
      Abaixo do verbo, na aba "Body", selecionaremos para expandir. Será exibida uma seção "Structured" e outra "Text", nesta última clicaremos na opção "JSON".
      Logo após, clicaremos no botão "Send", para disparar a requisição.
      Perceba que o retorno foi o código 403 Forbidden, ou seja, o Spring Security não bloqueou a requisição.
      A requisição foi processada, porém devolveu o código 403.
      Portanto, no arquivo AutenticacaoController, quando chamamos o manager.authenticate(token), o próprio Spring encontrou a classe AutenticacaoService.
      Depois, chamou o método que usa o repository e fez a consulta no banco de dados
      Assim, o processo de autenticação está sendo disparado corretamente. Isso significa que ele fez a consulta no banco de dados,
      mas não encontrou nenhum registro com o login e senha informados.
      No Insomnia, passamos as seguintes informações:

      "login": "ana.souza@voll.med",
      "senha": "123456"

      Isto é, não temos esse registro cadastrado no banco de dados. Isso acontece porque a nossa tabela de usuários está vazia.
      Por isso, precisamos incluir um usuário na tabela.
      Porém, em vídeos anteriores, aprendemos que deixar a senha explícita não é uma boa prática de segurança.
      Por isso, não vamos armazenar 123456, e sim, algum algoritmo de hashing de senhas.
      Isso para gerarmos o hashing da senha 123456, e salvá-la na coluna "senha" da tabela. Neste curso, usaremos o algoritmo BCrypt.

      No caso do instrutor, ele já tem anotado o que se refere a senha 123456, no formato do algoritmo BCrypt.

      123456 = $2a$10$Y50UaMFOxteibQEYLrwuHeehHYfcoafCopUazP12.rqB41bsolF5.

      Agora, podemos efetuar o login. Contudo, no banco de dados estamos usando o formato BCrypt de hashing da senha.
      Como o Spring identifica que estamos usando o BCrypt? Não configuramos isso ainda.
      Por ser uma configuração de segurança, voltaremos ao arquivo SecurityConfigurations.

      Criaremos mais um método usando a anotação @Bean. Será público e devolve um objeto do tipo PasswordEncoder,
      sendo a classe que representa o algoritmo de hashing da senha.
      O método não receberá nenhum parâmetro, somente retornaremos um novo BCryptPasswordEncoder(), sendo uma classe do
      Spring para instanciarmos como se fosse uma classe Java.
      Com isso, configuramos o Spring para usar esse algoritmo de hashing de senha.

      Podemos salvar o arquivo e voltar ao IntelliJ. Na aba "Run", conseguimos observar que foi reiniciado e não foi encontrado nenhum erro.
      Agora, podemos simular a requisição de login novamente. No Insomnia, vamos alterar a senha do JSON antes de disparar a requisição.
      Acrescentaremos "78" no final da senha.
      Logo após, clicamos no botão "Send", à direita do endereço. Note que o código devolvido foi o
      500 Internal Server Error
      Isso aconteceu porque precisamos implementar uma interface para o Spring Security na classe usuário.
      Para fazer essa configuração voltaremos ao IntelliJ, no arquivo Usuario.java.

      Para o Spring Security identificar a classe usuário do nosso projeto, precisamos informar.
      Por exemplo, como ele vai saber que o atributo login é o campo login? A forma para identificarmos isso é usando uma interface.
      Portanto, precisamos implementar uma interface chamada UserDetails (própria do Spring Security) na classe que representa o usuário.
      Por ser uma interface, precisamos implementar os métodos. Note que já até gerou erro de compilação.
      Para isso, usaremos o atalho "Alt + Enter" e na caixa de opções escolheremos a primeira "Implement methods".
      Na aba seguinte, será solicitado para selecionarmos os métodos que desejamos incluir no projeto.
      Deixaremos todos selecionados e clicaremos no botão "Ok".
      Note que há alguns objetos que devolvem dados do tipo boolean, todos estão com o retorno como false.
      Alteraremos todos para "true"
      No isCredentialsNonExpired(), é só caso quisermos controlar a conta do usuário: se há uma data de expiração ou se pode ter as credenciais bloqueadas.
      No caso, não faremos esse controle de conta, portanto, vamos devolver tudo como verdadeiro.
      Isso para comunicar ao Spring que o usuário não está bloqueado, está habilitado e a conta não expirou.
       Assim, retornamos tudo true. Caso queira controlar isso, basta criar os atributos e retornar os atributos específicos que representam essas informações.
      No método getUsername(), devolvemos qual atributo da classe representa o Username. Por isso, ao invés de retornar null, vamos devolver o login.
      Aplicaremos a mesma lógica no método getPassword().
      Assim que informamos ao Spring que o usuário é o atributo login, e que o getPassword é o atributo senha.
      No primeiro método criado, precisamos devolver um objeto do tipo Collection chamado getAuthorities.
      Caso tenhamos um controle de permissão no projeto, por exemplo, perfis de acesso, é necessário criar uma classe que represente esses perfis.
      No nosso caso, não controlamos os perfis. Se o usuário estiver cadastrado, pode acessar qualquer tela sem restrições.
      Mas precisamos devolver para o Spring uma coleção representando os perfis.
      Para isso, vamos simular uma coleção para compilarmos o projeto. Não usaremos, mas devolveremos um objeto válido para o Spring.
      No retorno, ao invés de null, vamos inserir List.of(). Dentro do parêntese, criaremos um objeto do tipo new SimpleGrantedAuthority(),
      sendo a classe do Spring que informa qual o perfil do usuário.
      Passaremos um perfil estático, em SimpleGrantedAuthority(). Por padrão, os perfis do Spring possui um prefixo, ROLE_, e o nome do perfil.
      No caso, será USER. (ROLE_USER).

4 - JSON Web Token

    * Nosso foco da aula será ter o token como retorno no Insomnia.
      De volta à classe AutenticacaoController.java, vamos remover .build() de return e adicionar o token entre os parênteses do parâmetro .ok
      Vamos adicionar a biblioteca Auth0 ao projeto. Ela será utilizada para gerar o token, seguindo o padrão JWT.
      Para pegarmos a biblioteca, acessaremos o site https://jwt.io/. Clicaremos na segunda opção do menu superior do site, "Libraries".
      Lá, encontraremos uma lista com várias bibliotecas que geram tokens no padrão JWT.
      Selecionaremos a primeira, a biblioteca em Java para gerar tokens em JWT do Auth0. Vamos clicar no link "View Repo",
      no canto inferior direito. Com isso, seremos redirecionados para o repositório da biblioteca no Github.
      Para instalar a biblioteca, vamos levar uma dependência para o Maven. Vamos copiar a tag de dependency abaixo da seção "Installation"
      JSON Web Token, ou JWT, é um padrão utilizado para a geração de tokens, que nada mais são do que Strings,
      representando, de maneira segura, informações que serão compartilhadas entre dois sistemas. Para saber mais https://jwt.io/introduction

    * Agora faremos a geração do token para inclui-lo na resposta.
      Faremos isso criando uma nova classe no projeto, para que possamos isolar o token, uma boa prática em programação.
      Vamos acessar "infra > security". É nessa pasta que criaremos o token.
      Apertaremos "Alt + Insert" e selecionaremos a primeira opção, "Java Class". O nome dela será "TokenService".

    * Vamos voltar à IDE e acessar a classe "AutenticacaoController.java". Vamos criar um DTO para encapsular o token e
      não devolvê-lo solto, como fazemos no corpo da resposta.
      Vamos selecionar tokenService.gerarToekn((Usuario) authentication.getPrincipal()). Com um "Ctrl + X",
      levaremos essa linha de código para antes da linha do return, onde criaremos outra variável, var tokenJWT =. Depois do =,
      colaremos a linha de código que antes estava abaixo.
      Passaremos como parâmetro do return (new DadosTokenJWT(tokenJWT)). Como a classe DadosTokenJWT ainda não foi criada, vamos nos deparar com um erro de compilação.
      Criaremos, portanto, com "Alt + Enter > Create Record DadosTokenJWT".
      Trocaremos o "Destination package" (pacote de destino) de med.voll.api.controller para med.voll.api.infra.security.
      Agora voltaremos à classe "TokenService.java" na IDE. Nela, precisamos passar uma senha secreta na linha de criação do algoritmo, o que é indispensável para fazer a assinatura do token.
      Nas aulas anteriores, havíamos passado "12345678" como senha. Como passar a senha em texto dentro do código não é uma boa prática de segurança, vamos fazer a leitura dessa senha de algum lugar.
      O primeiro passo será remover o "12345678" do código. No lugar dela, passaremos um atributo chamando secret.
      Vamos declarar o atributo dentro da classe TokenService, com a linha de código private String secret;
      Com o atalho "Shift + Shift", buscaremos por "application.properties". Nele, criaremos uma nova propriedade: api.security.token.secret=.
      Depois do =, pediremos para que o Spring leia essa informação a partir de uma variável de ambiente.
      Para isso, passaremos api.security.token.secret=${JWT_SECRET}. Logo depois, passaremos, ainda dentro das chaves, 12345678.
      A propriedade api.security.token.secret fica da seguinte forma: api.security.token.secret=${JWT_SECRET:12345678}
      Com isso, caso o sistema não consiga acessar a variável de ambiente, ele utilizará "12345678" como senha secreta.
      Se dispararmos a requisição no Insomnia, receberemos o erro 500 como retorno. O erro aconteceu porque, em "TokenService.java",
      nós declaramos o atributo secret mas não falamos para o Spring que ele deve buscá-lo em "application.properties".
      Na linha acima de private String secret;, passaremos a anotação @Value.
      Entre aspas, como parâmetro, passaremos "${api.security.token.secret}".

      Além do Issuer, Subject e data de expiração, podemos incluir outras informações no token JWT,
      de acordo com as necessidades da aplicação. Por exemplo, podemos incluir o id do usuário no token, para isso basta utilizar o método withClaim:

      return JWT.create()
          .withIssuer("API Voll.med")
          .withSubject(usuario.getLogin())

          .withClaim("id", usuario.getId())

          .withExpiresAt(dataExpiracao())
          .sign(algoritmo);

      O método withClaim recebe dois parâmetros, sendo o primeiro uma String que identifica o nome do
      claim (propriedade armazenada no token), e o segundo a informação que se deseja armazenar.

5 - Controle de Acesso

    * Filter é um dos recursos que fazem parte da especificação de Servlets, a qual padroniza o tratamento de requisições
        e respostas em aplicações Web no Java. Ou seja, tal recurso não é específico do Spring, podendo assim ser utilizado em qualquer aplicação Java.
        É um recurso muito útil para isolar códigos de infraestrutura da aplicação, como, por exemplo, segurança, logs e auditoria,
        para que tais códigos não sejam duplicados e misturados aos códigos relacionados às regras de negócio da aplicação.
        Para criar um Filter, basta criar uma classe e implementar nela a interface Filter (pacote jakarta.servlet). Por exemplo:

        @WebFilter(urlPatterns = "/api/**")
        public class LogFilter implements Filter {

            @Override
            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
                System.out.println("Requisição recebida em: " + LocalDateTime.now());
                filterChain.doFilter(servletRequest, servletResponse);
            }

        }

        O método doFilter é chamado pelo servidor automaticamente, sempre que esse filter tiver que ser executado, e a
        chamada ao método filterChain.doFilter indica que os próximos filters, caso existam outros, podem ser executados.
        A anotação @WebFilter, adicionada na classe, indica ao servidor em quais requisições esse filter deve ser chamado, baseando-se na URL da requisição.
        No curso, utilizaremos outra maneira de implementar um filter, usando recursos do Spring que facilitam sua implementação.

    * Vamos criar um filtro no projeto, para interceptar requisições. O que queremos é fazer a validação do token antes que ele caia no controller.
      Para isso, voltaremos à IDE.
      Vamos criar o projeto dentro da pasta "med.voll.api > infra > security". Vamos usar o atalho "Alt + Insert" e escolher a opção "Class".
      O nome da classe será "SecurityFilter".
      Como o Spring não conseguirá carregar a classe automaticamente no projeto, precisaremos passar a anotação @Component no código.
      Vamos implementar Filter, de jakarta.servlet, passando implements.
      Passaremos também extends OncePerRequestFilter. Com o atalho "Alt + Enter", vamos implementar o método doFilterInternal.
      Agora basta implementar o método com o seguinte código:
      filterChain.doFilter(request, response);

    * Agora vamos implementar a lógica do nosso filtro, recuperando o token para fazer sua validação.
      No Insomnia, se acessarmos a aba "Auth", conseguiremos acessar as configurações referentes à autorização.
      Clicaremos na seta à direita da aba e vamos escolher a opção "Bearer".
      Vamos deixar a checkbox de "Enabled" selecionada. No primeiro campo de texto, à direita de "Token", vamos passar o texto do token.
      Se dispararmos o token, nada acontecerá ainda, porque ele ainda não está sendo recuperado.
      De volta à IDE, vamos recuperá-lo em "SecurityFilter.java". Em @Override, logo abaixo de protected void, passaremos var tokenJWT = recuperarToken(request). Com o método recuperarToken, recuperaremos o token.
      Vamos nos deparar com um erro de compilação, porque esse método ainda não existe. Vamos criá-lo com o atalho "Alt + Enter".
      No retorno do novo método, substituiremos void por String. Dentro dele, abriremos a variável authorizationHeader = request.getHeader("Authorization");.
      Depois disso, faremos a validação com if (authorizationHeader == null). Abaixo, passaremos throw new RuntimeException("Token JWT não enviado no cabeçalho Authorization!").
      Fora do if, passaremos return authorizationHeader;.
      Abaixo de var tokenJWT, passaremos System.out.println(tokenJWT);.
      No método recuperarToken, na última linha do código, adicionaremos .replace("Bearer ", ""):

    * Vamos apagar System.out.println(tokenJWT) do método @Override. Nosso próximo passo será fazer a validação do token.
      Faremos isso acessando "TokenService.java". Nesse arquivo, criaremos o método "getSubject", que receberá como parâmetro String tokenJWT.
      Dentro das chaves, passaremos o código de validação de token. Vamos encontrá-lo na biblioteca https://github.com/auth0/java-jwt.
      O código poderá ser encontrado na seção "Verify a JWT". Vamos substituir o algoritmo padrão pelo algoritmo do método "gerarToken", do mesmo arquivo.
      Faremos algumas adaptações. Se a requisição cair em catch, lançaremos uma exceção, com o código throw new RuntimeException("Token JWT inválido ou expirado!"):

      public String getSubject(String tokenJWT) {
          try {
              var algoritmo = Algorithm.HMAC256(secret);
              return JWT.require(algoritmo)
                              .withIssuer("API Voll.med")
                              .build()
                              .verify(tokenJWT)
                              .getSubject();
          } catch (JWTVerificationException exception) {
              throw new RuntimeException("Token JWT inválido ou expirado!");
          }
      }

      Agora voltaremos à classe "SecurityFilter.java", para chamar o método "TokenService.java". Vamos declará-la como atributo,
      abaixo de @Component. Vamos pedir que o Spring injete essa classe para nós.
      A anotação do atributo será @Autowired. Vamos importar com private TokenService tokenService;:

      @Autowired
      private TokenService tokenService;

      Obs: Cuidado na hora de importar. Precisa ser o "TokenService" do nosso projeto, e não o do Spring.

      No método doFilterInternal, já recuperamos o token do cabeçalho na primeira linha. Agora, precisaremos validar se o token está correto.
      Faremos isso chamando o método getSubject e criando também a variável var subject = tokenService.getSubject(tokenJWT);.
      Logo, abaixo, passaremos um System.out, para ver se tudo está funcionando:

      @Override
      protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
          var tokenJWT = recuperarToken(request);

          var subject = tokenService.getSubject(tokenJWT);
          System.out.println(subject);

          filterChain.doFilter(request, response);
      }

      Depois de salvar, vamos até o Insomnia para disparar uma requisição.
      Vamos disparar a requisição "Detalhar Médico". O token não será enviado e nós receberemos um erro 500 como resultado, porque nós não configuramos o token.
      Vamos selecionar, agora, a opção "Listagem de médicos". Lá, clicaremos na caixa de seleção à direita de "Enabled". Com isso, habilitaremos o cabeçalho, que é o responsável pelo envio do token.
      Se dispararmos a requisição, ela será processada com sucesso. Como retorno, teremos um arquivo .json com os dados do médico.
      Se dermos uma olhada no console da IDE, veremos que o e-mail foi impresso.
      Com isso, conseguimos recuperar o token, que vem de dentro do cabeçalho "Authorization", na requisição.
      Podemos remover o System.out, porque verificamos que a autenticação está funcionando: